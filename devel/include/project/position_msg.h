// Generated by gencpp from file project/position_msg.msg
// DO NOT EDIT!


#ifndef PROJECT_MESSAGE_POSITION_MSG_H
#define PROJECT_MESSAGE_POSITION_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace project
{
template <class ContainerAllocator>
struct position_msg_
{
  typedef position_msg_<ContainerAllocator> Type;

  position_msg_()
    : path()
    , now_x(0.0)
    , now_y(0.0)
    , next_dot(0)
    , next_p()
    , passing()  {
    }
  position_msg_(const ContainerAllocator& _alloc)
    : path(_alloc)
    , now_x(0.0)
    , now_y(0.0)
    , next_dot(0)
    , next_p(_alloc)
    , passing(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _path_type;
  _path_type path;

   typedef double _now_x_type;
  _now_x_type now_x;

   typedef double _now_y_type;
  _now_y_type now_y;

   typedef int64_t _next_dot_type;
  _next_dot_type next_dot;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _next_p_type;
  _next_p_type next_p;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _passing_type;
  _passing_type passing;





  typedef boost::shared_ptr< ::project::position_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project::position_msg_<ContainerAllocator> const> ConstPtr;

}; // struct position_msg_

typedef ::project::position_msg_<std::allocator<void> > position_msg;

typedef boost::shared_ptr< ::project::position_msg > position_msgPtr;
typedef boost::shared_ptr< ::project::position_msg const> position_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project::position_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project::position_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace project

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'project': ['/home/isp/Desktop/workspace/src/project/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::project::position_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project::position_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project::position_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project::position_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project::position_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project::position_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project::position_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c8333feeb19f29f3015ed8ba27f62fc";
  }

  static const char* value(const ::project::position_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c8333feeb19f29fULL;
  static const uint64_t static_value2 = 0x3015ed8ba27f62fcULL;
};

template<class ContainerAllocator>
struct DataType< ::project::position_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project/position_msg";
  }

  static const char* value(const ::project::position_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project::position_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] path\n"
"float64 now_x\n"
"float64 now_y\n"
"int64 next_dot\n"
"float64[] next_p\n"
"float64[] passing\n"
;
  }

  static const char* value(const ::project::position_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project::position_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path);
      stream.next(m.now_x);
      stream.next(m.now_y);
      stream.next(m.next_dot);
      stream.next(m.next_p);
      stream.next(m.passing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project::position_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project::position_msg_<ContainerAllocator>& v)
  {
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.path[i]);
    }
    s << indent << "now_x: ";
    Printer<double>::stream(s, indent + "  ", v.now_x);
    s << indent << "now_y: ";
    Printer<double>::stream(s, indent + "  ", v.now_y);
    s << indent << "next_dot: ";
    Printer<int64_t>::stream(s, indent + "  ", v.next_dot);
    s << indent << "next_p[]" << std::endl;
    for (size_t i = 0; i < v.next_p.size(); ++i)
    {
      s << indent << "  next_p[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.next_p[i]);
    }
    s << indent << "passing[]" << std::endl;
    for (size_t i = 0; i < v.passing.size(); ++i)
    {
      s << indent << "  passing[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.passing[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT_MESSAGE_POSITION_MSG_H
